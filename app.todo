# My Spotify Liked Songs App

## Environment setup
[x] Install database dependencies: mongoose
[x] Install dependencies: axios, qs, spotify-web-api-node
[x] Install dev dependencies: netlify-lambda nodemon dotenv http-proxy-middleware
[x] Git init
[x] Create /functions folder
[x] Add script in package.json to handle lambda build and lambda deploy
[x] Include functions folder and .env file in .gitignore
[x] Create netlify.toml file 

### netlify.toml
[x] Add build command and point functions to the /functions folder
[] Add redirect command to redirect /api/* to /.netlify/functions/:splat
[] Add dev command to specify development port, command and publish folder

## Database 
[x] Create MongoDB database on MongoDB Atlas
[x] Get connection string
[x] Insert the connection string into .env file as DB_URL

## Backend
### my-spotify-liked-songs-backend
[x] Create an express app that is only available locally to get liked songs from Spotify Web API and save them into the database
[x] Install dependencies: express, axios, qs, nodemon, helmet, dotenv
[x] Create function to authorize client
[x] Use the code to get access token
[x] Refactor codes into a utils file

## API
[] Use netlify-cli to create get-data function

### update-data-db function
[x] Connect to database using MongoClient and process.env.DB_URL
[x] Fetch request from Spotify API with 50 limit and offset 0
[x] Parse the data to filter off unnecessary data
[x] Push the data into an array
[x] Continue fetching request from the API based on the "next" data until it becomes null and push the data into the array
[x] Then save the data into MongoDB database

### get-data function
[] Connect to database using mongoose and process.env.MONGO_URL
[] Fetch data from database using mongoose
[] Return data in JSON format

## Frontend

### UI
[] Background color similar to Spotify's color scheme
[] Make body centralized and with a fixed width
[] Title header
[] A search bar to search for song title
[] A text to show total number of songs 
[] A card component to show song name, artist name, album name, album image, and song duration
